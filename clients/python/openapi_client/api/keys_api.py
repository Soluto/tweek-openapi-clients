# coding: utf-8

"""
    Tweek

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class KeysApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_key(self, key_path, author_name, author_email, key_update_model, **kwargs):  # noqa: E501
        """create_key  # noqa: E501

        Save Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_key(key_path, author_name, author_email, key_update_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param KeyUpdateModel key_update_model: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_key_with_http_info(key_path, author_name, author_email, key_update_model, **kwargs)  # noqa: E501
        else:
            (data) = self.create_key_with_http_info(key_path, author_name, author_email, key_update_model, **kwargs)  # noqa: E501
            return data

    def create_key_with_http_info(self, key_path, author_name, author_email, key_update_model, **kwargs):  # noqa: E501
        """create_key  # noqa: E501

        Save Key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_key_with_http_info(key_path, author_name, author_email, key_update_model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param KeyUpdateModel key_update_model: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['key_path', 'author_name', 'author_email', 'key_update_model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key_path' is set
        if ('key_path' not in local_var_params or
                local_var_params['key_path'] is None):
            raise ValueError("Missing the required parameter `key_path` when calling `create_key`")  # noqa: E501
        # verify the required parameter 'author_name' is set
        if ('author_name' not in local_var_params or
                local_var_params['author_name'] is None):
            raise ValueError("Missing the required parameter `author_name` when calling `create_key`")  # noqa: E501
        # verify the required parameter 'author_email' is set
        if ('author_email' not in local_var_params or
                local_var_params['author_email'] is None):
            raise ValueError("Missing the required parameter `author_email` when calling `create_key`")  # noqa: E501
        # verify the required parameter 'key_update_model' is set
        if ('key_update_model' not in local_var_params or
                local_var_params['key_update_model'] is None):
            raise ValueError("Missing the required parameter `key_update_model` when calling `create_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key_path' in local_var_params:
            query_params.append(('keyPath', local_var_params['key_path']))  # noqa: E501
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_email' in local_var_params:
            query_params.append(('author.email', local_var_params['author_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'key_update_model' in local_var_params:
            body_params = local_var_params['key_update_model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/keys', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key(self, key_path, **kwargs):  # noqa: E501
        """get_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key(key_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str revision:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_key_with_http_info(key_path, **kwargs)  # noqa: E501
        else:
            (data) = self.get_key_with_http_info(key_path, **kwargs)  # noqa: E501
            return data

    def get_key_with_http_info(self, key_path, **kwargs):  # noqa: E501
        """get_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_with_http_info(key_path, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str revision:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['key_path', 'revision']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key_path' is set
        if ('key_path' not in local_var_params or
                local_var_params['key_path'] is None):
            raise ValueError("Missing the required parameter `key_path` when calling `get_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key_path' in local_var_params:
            query_params.append(('keyPath', local_var_params['key_path']))  # noqa: E501
        if 'revision' in local_var_params:
            query_params.append(('revision', local_var_params['revision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def keys_delete_key(self, key_path, author_name, author_email, **kwargs):  # noqa: E501
        """keys_delete_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keys_delete_key(key_path, author_name, author_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param list[str] request_body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.keys_delete_key_with_http_info(key_path, author_name, author_email, **kwargs)  # noqa: E501
        else:
            (data) = self.keys_delete_key_with_http_info(key_path, author_name, author_email, **kwargs)  # noqa: E501
            return data

    def keys_delete_key_with_http_info(self, key_path, author_name, author_email, **kwargs):  # noqa: E501
        """keys_delete_key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.keys_delete_key_with_http_info(key_path, author_name, author_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_path: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param list[str] request_body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['key_path', 'author_name', 'author_email', 'request_body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method keys_delete_key" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key_path' is set
        if ('key_path' not in local_var_params or
                local_var_params['key_path'] is None):
            raise ValueError("Missing the required parameter `key_path` when calling `keys_delete_key`")  # noqa: E501
        # verify the required parameter 'author_name' is set
        if ('author_name' not in local_var_params or
                local_var_params['author_name'] is None):
            raise ValueError("Missing the required parameter `author_name` when calling `keys_delete_key`")  # noqa: E501
        # verify the required parameter 'author_email' is set
        if ('author_email' not in local_var_params or
                local_var_params['author_email'] is None):
            raise ValueError("Missing the required parameter `author_email` when calling `keys_delete_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'key_path' in local_var_params:
            query_params.append(('keyPath', local_var_params['key_path']))  # noqa: E501
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_email' in local_var_params:
            query_params.append(('author.email', local_var_params['author_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_body' in local_var_params:
            body_params = local_var_params['request_body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/keys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
