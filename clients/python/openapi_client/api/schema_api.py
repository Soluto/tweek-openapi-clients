# coding: utf-8

"""
    Tweek

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class SchemaApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_identity(self, identity_type, author_name, author_email, **kwargs):  # noqa: E501
        """delete_identity  # noqa: E501

        Delete Schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity(identity_type, author_name, author_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: The type of the identity (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_identity_with_http_info(identity_type, author_name, author_email, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_identity_with_http_info(identity_type, author_name, author_email, **kwargs)  # noqa: E501
            return data

    def delete_identity_with_http_info(self, identity_type, author_name, author_email, **kwargs):  # noqa: E501
        """delete_identity  # noqa: E501

        Delete Schema  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_identity_with_http_info(identity_type, author_name, author_email, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: The type of the identity (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identity_type', 'author_name', 'author_email']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_identity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identity_type' is set
        if ('identity_type' not in local_var_params or
                local_var_params['identity_type'] is None):
            raise ValueError("Missing the required parameter `identity_type` when calling `delete_identity`")  # noqa: E501
        # verify the required parameter 'author_name' is set
        if ('author_name' not in local_var_params or
                local_var_params['author_name'] is None):
            raise ValueError("Missing the required parameter `author_name` when calling `delete_identity`")  # noqa: E501
        # verify the required parameter 'author_email' is set
        if ('author_email' not in local_var_params or
                local_var_params['author_email'] is None):
            raise ValueError("Missing the required parameter `author_email` when calling `delete_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identity_type' in local_var_params:
            path_params['identityType'] = local_var_params['identity_type']  # noqa: E501

        query_params = []
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_email' in local_var_params:
            query_params.append(('author.email', local_var_params['author_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{identityType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_schemas(self, **kwargs):  # noqa: E501
        """get_schemas  # noqa: E501

        Get query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schemas(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_schemas_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_schemas_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_schemas_with_http_info(self, **kwargs):  # noqa: E501
        """get_schemas  # noqa: E501

        Get query  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_schemas_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[object]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_schemas" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemas', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[object]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schema_add_identity(self, identity_type, author_name, author_email, body, **kwargs):  # noqa: E501
        """schema_add_identity  # noqa: E501

        Add identity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schema_add_identity(identity_type, author_name, author_email, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param object body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schema_add_identity_with_http_info(identity_type, author_name, author_email, body, **kwargs)  # noqa: E501
        else:
            (data) = self.schema_add_identity_with_http_info(identity_type, author_name, author_email, body, **kwargs)  # noqa: E501
            return data

    def schema_add_identity_with_http_info(self, identity_type, author_name, author_email, body, **kwargs):  # noqa: E501
        """schema_add_identity  # noqa: E501

        Add identity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schema_add_identity_with_http_info(identity_type, author_name, author_email, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param object body: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identity_type', 'author_name', 'author_email', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_add_identity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identity_type' is set
        if ('identity_type' not in local_var_params or
                local_var_params['identity_type'] is None):
            raise ValueError("Missing the required parameter `identity_type` when calling `schema_add_identity`")  # noqa: E501
        # verify the required parameter 'author_name' is set
        if ('author_name' not in local_var_params or
                local_var_params['author_name'] is None):
            raise ValueError("Missing the required parameter `author_name` when calling `schema_add_identity`")  # noqa: E501
        # verify the required parameter 'author_email' is set
        if ('author_email' not in local_var_params or
                local_var_params['author_email'] is None):
            raise ValueError("Missing the required parameter `author_email` when calling `schema_add_identity`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in local_var_params or
                local_var_params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `schema_add_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identity_type' in local_var_params:
            path_params['identityType'] = local_var_params['identity_type']  # noqa: E501

        query_params = []
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_email' in local_var_params:
            query_params.append(('author.email', local_var_params['author_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{identityType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def schema_patch_identity(self, identity_type, author_name, author_email, patch_operation, **kwargs):  # noqa: E501
        """schema_patch_identity  # noqa: E501

        Update identity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schema_patch_identity(identity_type, author_name, author_email, patch_operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param list[PatchOperation] patch_operation: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.schema_patch_identity_with_http_info(identity_type, author_name, author_email, patch_operation, **kwargs)  # noqa: E501
        else:
            (data) = self.schema_patch_identity_with_http_info(identity_type, author_name, author_email, patch_operation, **kwargs)  # noqa: E501
            return data

    def schema_patch_identity_with_http_info(self, identity_type, author_name, author_email, patch_operation, **kwargs):  # noqa: E501
        """schema_patch_identity  # noqa: E501

        Update identity  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.schema_patch_identity_with_http_info(identity_type, author_name, author_email, patch_operation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str identity_type: (required)
        :param str author_name: (required)
        :param str author_email: (required)
        :param list[PatchOperation] patch_operation: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['identity_type', 'author_name', 'author_email', 'patch_operation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method schema_patch_identity" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'identity_type' is set
        if ('identity_type' not in local_var_params or
                local_var_params['identity_type'] is None):
            raise ValueError("Missing the required parameter `identity_type` when calling `schema_patch_identity`")  # noqa: E501
        # verify the required parameter 'author_name' is set
        if ('author_name' not in local_var_params or
                local_var_params['author_name'] is None):
            raise ValueError("Missing the required parameter `author_name` when calling `schema_patch_identity`")  # noqa: E501
        # verify the required parameter 'author_email' is set
        if ('author_email' not in local_var_params or
                local_var_params['author_email'] is None):
            raise ValueError("Missing the required parameter `author_email` when calling `schema_patch_identity`")  # noqa: E501
        # verify the required parameter 'patch_operation' is set
        if ('patch_operation' not in local_var_params or
                local_var_params['patch_operation'] is None):
            raise ValueError("Missing the required parameter `patch_operation` when calling `schema_patch_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'identity_type' in local_var_params:
            path_params['identityType'] = local_var_params['identity_type']  # noqa: E501

        query_params = []
        if 'author_name' in local_var_params:
            query_params.append(('author.name', local_var_params['author_name']))  # noqa: E501
        if 'author_email' in local_var_params:
            query_params.append(('author.email', local_var_params['author_email']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'patch_operation' in local_var_params:
            body_params = local_var_params['patch_operation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/schemas/{identityType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
