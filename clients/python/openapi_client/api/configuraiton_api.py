# coding: utf-8

"""
    Tweek

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class ConfiguraitonApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_value(self, key_name, **kwargs):  # noqa: E501
        """get_value  # noqa: E501

        Get tweek key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_value(key_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_name: Context ids (required)
        :param dict(str, str) params:
        :param list[str] include: Include additional keys
        :param bool flatten: Return flat key/value JSON (no nesting)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_value_with_http_info(key_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_value_with_http_info(key_name, **kwargs)  # noqa: E501
            return data

    def get_value_with_http_info(self, key_name, **kwargs):  # noqa: E501
        """get_value  # noqa: E501

        Get tweek key value  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_value_with_http_info(key_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str key_name: Context ids (required)
        :param dict(str, str) params:
        :param list[str] include: Include additional keys
        :param bool flatten: Return flat key/value JSON (no nesting)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['key_name', 'params', 'include', 'flatten']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_value" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'key_name' is set
        if ('key_name' not in local_var_params or
                local_var_params['key_name'] is None):
            raise ValueError("Missing the required parameter `key_name` when calling `get_value`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'params' in local_var_params:
            query_params.append(('params', local_var_params['params']))  # noqa: E501
        if 'key_name' in local_var_params:
            query_params.append(('keyName', local_var_params['key_name']))  # noqa: E501
        if 'include' in local_var_params:
            query_params.append(('$include', local_var_params['include']))  # noqa: E501
            collection_formats['$include'] = 'multi'  # noqa: E501
        if 'flatten' in local_var_params:
            query_params.append(('$flatten', local_var_params['flatten']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/values', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
